//assigning charsets
var lowerCase = ['a',	'b',	'c',	'd',	'e',	'f',	'g',	'h',	'i',	'j',	'k',	'l',	'm',	'n',	'o',	'p',	'q',	'r',	's',	't',	'u', 'v',	'w', 'x','y','z'];
var upperCase = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', '']; 
var numeric = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
var specialChar = ["!","#","$","%","&","'","(",")","*","+","-",".","/",":",";","<","=",">","?","@","[","\","^"_","`","{","|","}","~",];
// var charSets = [lowerCase[i], upperCase[i], numeric[i], specialChar[i]];

console.log(lowerCase.length)
//did this so i just have to make them true to use 
lowChar = false;
upChar  = false;
numChar = false;
speChar = false;
// the alert if incorrect input was entered
function incorrectInput() {
  window.alert("oops! something went wrong please check your input");
};
//selects the characters for the generator i hope
function inCompLow(charSel){
  if(charSel == "yes" || charSel == "YES") {
    lowChar = true;
    window.alert("You have selected lower case characters");
  }else {};
};

function inCompUp(charSel) { 
  if (charSel == "yes" || charSel == "YES") {
  upChar = true;
  window.alert("You have selected Upper case characters");                                        
}else {};
};

function inCompNum(charSel) { 
  if (charSel == "yes" || charSel == "YES") {
  numChar = true;
  window.alert("You have selected numeric characters");
} else {};
};

function inCompSpec(charSel) { 
  if (charSel == "yes" || charSel == "YES") {
  speChar = true;
  window.alert("You have selected numeric characters")
}else {};
};

//the alert if char length doesnt meet requirements
function minMaxAlert() {
  alert("This password generator has a minimum of 8 characters and maximum of 126.");
};



function charPrompt(){
  var charSel1 = window.prompt("Does your password require lowercase characters? please enter yes or no.");
inCompLow(charSel1);
//debugger;
var charSel2 = window.prompt("Does your password require UpperCase characters? please enter yes or no.");
inCompUp(charSel2);
//debugger;
var charSel3 = window.prompt("Does your password require Numerical characters? please enter yes or no.");
inCompNum(charSel3);
//debugger;
var charSel4 = window.prompt("Does your password require special characters? please enter yes or no.");
inCompSpec(charSel4);
//debugger;
};
var pass = "";
// the legendary password geny
function randoPasso(passLength){
  charPrompt();
  var max1 = lowerCase.length;
  var min1 = 1;
  var max2 = numeric.length;
  var max3 = 26;
//nice lil space 
   if (lowChar && upChar && numChar && speChar) {
      for (i = 0; i < passLength; i++) {
        var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
        var nN = Math.floor(Math.random()*(max2-min1+1)+min1);
        var nS = Math.floor(Math.random()*(max3-min1+1)+min1);       
        var charSets = [lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],lowerCase[nB], upperCase[nN], numeric[nN], specialChar[nS],];
        //space
        pass = pass+charSets[i];
      };debugger;
      window.alert(pass);
  }else if (upChar && numChar && speChar) {
    for (i = 0; i < passLength; i++) {
      var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
      var nN = Math.floor(Math.random()*(max2-min1+1)+min1);
      var nS = Math.floor(Math.random()*(max3-min1+1)+min1);       
      var charSets = [upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],upperCase[nN], numeric[nN], specialChar[nS],];
      //space
      pass = pass+charSets[i];
  };debugger;
  }else if (numChar && speChar){
    for (i = 0; i < passLength; i++) {
      var nN = Math.floor(Math.random()*(max2-min1+1)+min1);
      var nS = Math.floor(Math.random()*(max3-min1+1)+min1);       
      var charSets = [numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],numeric[nN], specialChar[nS],];
      //space
      pass = pass+charSets[i];
  };debugger;
  }else if (speChar) {
    for (i = 0; i < passLength; i++) {
      var nS = Math.floor(Math.random()*(max3-min1+1)+min1);       
      var charSets = [specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],specialChar[nS],];
      //space
      pass = pass+charSets[i];
  };debugger;
  }else if (lowChar && numChar && speChar) {
    for (i = 0; i < passLength; i++) {
      var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
      var nN = Math.floor(Math.random()*(max2-min1+1)+min1);
      var nS = Math.floor(Math.random()*(max3-min1+1)+min1);       
      var charSets = [lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],lowerCase[nB], numeric[nN], specialChar[nS],];
      //space
      pass = pass+charSets[i];
    };debugger;
  }else if (lowChar && speChar) {
    for (i = 0; i < passLength; i++) {
      var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
      var nS = Math.floor(Math.random()*(max3-min1+1)+min1);       
      var charSets = [lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB], specialChar[nS],lowerCase[nB],];
      //space
      pass = pass+charSets[i];
    };debugger;
  }else if (upChar && speChar) {
    for (i = 0; i < passLength; i++) {
      var nN = Math.floor(Math.random()*(max2-min1+1)+min1);
      var nS = Math.floor(Math.random()*(max3-min1+1)+min1);       
      var charSets = [upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],upperCase[nN], specialChar[nS],];
      //space
      pass = pass+charSets[i];
  };debugger;
  }else if (lowChar && upChar && speChar) {
    for (i = 0; i < passLength; i++) {
      var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
      var nN = Math.floor(Math.random()*(max2-min1+1)+min1);
      var nS = Math.floor(Math.random()*(max3-min1+1)+min1);       
      var charSets = [lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],lowerCase[nB], upperCase[nN], specialChar[nS],];
      //space
      pass = pass+charSets[i];
    };debugger;
  }else if (lowChar && upChar && numChar) {
     for (i = 0; i < passLength; i++) {
      var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
      var nN = Math.floor(Math.random()*(max2-min1+1)+min1);     
      var charSets = [lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],lowerCase[nB], upperCase[nN], numeric[nN],];
      //space
      pass = pass+charSets[i];
    }; debugger;
  }else if (lowChar && numChar) {
    for (i = 0; i < passLength; i++) {
     var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
     var nN = Math.floor(Math.random()*(max2-min1+1)+min1);     
     var charSets = [lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],lowerCase[nB], numeric[nN],];
     //space
     pass = pass+charSets[i];
   }; debugger;
}else if (upChar && numChar) {
  for (i = 0; i < passLength; i++) {
   var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
   var nN = Math.floor(Math.random()*(max2-min1+1)+min1);     
   var charSets = [upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],upperCase[nB], numeric[nN],];
   pass = pass+charSets[i];
 }; debugger;
}else if (numChar) {
  for (i = 0; i < passLength; i++) {
   var nN = Math.floor(Math.random()*(max2-min1+1)+min1);     
   var charSets = [numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],numeric[nN],];
   pass = pass+charSets[i];
 }; debugger;  
} else if (upChar) {
  for (i = 0; i < passLength; i++) {
   var nB = Math.floor(Math.random()*(max1-min1+1)+min1);
   var nN = Math.floor(Math.random()*(max2-min1+1)+min1);     
   var charSets = [upperCase[nB], numeric[n],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],upperCase[nB],];
   pass = pass+charSets[i];
  } debugger;
} else if (lowChar) {
  for (i = 0; i < passLength; i++) {
    var nB = Math.floor(Math.random()*(max1-min1+1)+min1);   
    var charSets = [lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],lowerCase[nB],];
    //space
    pass = pass+charSets[i];
  }; debugger;
}else debugger;{
};
};
debugger;
var password = "";
function generatePassword() {
minMaxAlert();
var passLength = window.prompt("Enter a numeric value for desired length.");
if (passLength >= 8 && passLength <= 128) {
    window.alert("You have selected "+ passLength+".");
    //charPrompt();
    randoPasso(passLength);
    debugger;

} else if (passLength < 8) {
    minMaxAlert();
} else if (passLength > 126) {
    minMaxAlert();
} else {
   incorrectInput();
};
password = password+pass
return password;
debugger;
};

// Get references to the #generate element
var generateBtn = document.querySelector("#generate");

// Write password to the #password input
function writePassword() {
  var password = generatePassword();
  var passwordText = document.querySelector("#password");

  passwordText.value = password;

};

// Add event listener to generate button
generateBtn.addEventListener("click", writePassword);{
};

